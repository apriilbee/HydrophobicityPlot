package hydrophobicityplots;


import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author testuser
 */
public class HydrophobicityPlot extends javax.swing.JFrame {

    /**
     * Creates new form HydrophobicityPlot
     */
    SpinnerModel spinModel;
    
    public HydrophobicityPlot() {
        int defaultVal = 19, min = 3, max = 51, step = 2;
        spinModel = new SpinnerNumberModel(defaultVal, min, max, step);
        buildHydrophobicityPlots();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        app_name = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        input_field = new javax.swing.JTextArea();
        import_button = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        sliding_window = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hydro_combo = new javax.swing.JComboBox<>();
        generatePlot = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        hydro_threshold = new javax.swing.JSlider();
        Hashtable labelTable = new Hashtable();
        labelTable.put( new Integer(5), new JLabel("0.5") );
        labelTable.put( new Integer(10), new JLabel("1.0") );
        labelTable.put( new Integer(15), new JLabel("1.5") );
        labelTable.put( new Integer(20), new JLabel("2.0") );
        labelTable.put( new Integer(25), new JLabel("2.5") );
        hydro_threshold.setLabelTable( labelTable );
        jButton2 = new javax.swing.JButton();
        getSegments = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        app_name.setText("Hydrophobicity Plot");

        jPanel2.setBackground(new java.awt.Color(0, 165, 181));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        input_field.setColumns(20);
        input_field.setRows(5);
        jScrollPane1.setViewportView(input_field);

        import_button.setText("Upload Text File");
        import_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                import_buttonMouseClicked(evt);
            }
        });
        import_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_buttonActionPerformed(evt);
            }
        });

        jLabel2.setText("INPUT");

        jButton3.setText("Reset Input");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        sliding_window.setModel(spinModel);

        jLabel1.setText("Sliding Window Length:");

        jLabel3.setText("Hydrophobicity Scale:");

        hydro_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kyte-Doolittle", "Hopp-Woods", "Cornette", "Eisenberg", "Rose", "Janin", "Engelman GES" }));
        hydro_combo.setSelectedItem("Kyte Doolittle");

        generatePlot.setText("Generate Plot");
        generatePlot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generatePlotMouseClicked(evt);
            }
        });
        generatePlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePlotActionPerformed(evt);
            }
        });

        jLabel4.setText("Average Hydrophobicity Threshold:");

        hydro_threshold.setMaximum(25);
        hydro_threshold.setMinimum(5);
        hydro_threshold.setPaintLabels(true);
        hydro_threshold.setPaintTicks(true);
        hydro_threshold.setSnapToTicks(true);
        hydro_threshold.setValue(10);

        jButton2.setText("Default Settings");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        getSegments.setText("Get Segments");
        getSegments.setEnabled(false);
        getSegments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getSegmentsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sliding_window, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(hydro_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(20, 20, 20))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(generatePlot, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(299, 299, 299)
                                .addComponent(hydro_threshold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(app_name, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(import_button, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getSegments, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(app_name, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sliding_window, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(98, 98, 98))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hydro_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)))
                        .addComponent(hydro_threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generatePlot))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(import_button)
                    .addComponent(getSegments))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        input_field.setText("");
        getSegments.setEnabled(false);
    }//GEN-LAST:event_jButton3MouseClicked

    
    private void import_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_import_buttonMouseClicked
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
       
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(this.getParent());
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = fc.getSelectedFile();
            System.out.println("Selected File is this: " + selectedFile.getAbsolutePath());
            try(BufferedReader br = new BufferedReader(new FileReader(selectedFile.toString()))){
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();
                
                while(line != null){
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                
                String dna_sequence = sb.toString();
                input_field.setText(dna_sequence);
                
            } catch (IOException ex) {
                Logger.getLogger(HydrophobicityPlot.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
       
    }//GEN-LAST:event_import_buttonMouseClicked

    private void import_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_buttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_import_buttonActionPerformed

    private void generatePlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePlotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generatePlotActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    PlotGraph a;
    private void generatePlotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generatePlotMouseClicked
        // TODO add your handling code here:
        ArrayList<ArrayList> plots = new ArrayList();
        ArrayList<ArrayList> pos = new ArrayList();
        ArrayList<String> inputs = new ArrayList();
        Map<String, Double> hydroScale = getScale(hydro_combo.getSelectedIndex());
        int window = Integer.valueOf(String.valueOf(sliding_window.getValue()));
        if(!input_field.getText().contains(">")){
            JOptionPane.showMessageDialog(this, 
            "Check input. Invalid fasta format", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        else{
            try{
                inputs = getInputs();
                //System.out.println(protein_names.toString());
                for(int i=0; i<inputs.size(); i++){
                    String input = inputs.get(i);
                    ArrayList tmp_pos = new ArrayList();
                    ArrayList<Double> plot = new ArrayList<>();

                    for(int start = 0, end = start+(window-1); end<=input.length()-1; start++, end++){
                        Double sum = 0.0;
                        for(int x=start; x<=end; x++){
                          sum += hydroScale.get(String.valueOf(input.charAt(x)));
                        }
                        int mid = (start+end)/2;
                        plot.add((Double)sum/window);
                        tmp_pos.add(mid);

                    }
                    plots.add(plot);
                    pos.add(tmp_pos);
                }
                //test this
                a = new PlotGraph(plots,pos,hydro_threshold.getValue()/10.0,window, protein_names);
                getSegments.setEnabled(true);
            } catch(Exception e){
                //System.out.println(inputs.size() + " sizeeee");
                
                JOptionPane.showMessageDialog(this, 
                "Check input. Invalid fasta format", "Error Message", JOptionPane.ERROR_MESSAGE);
            }   
        }
        
    }//GEN-LAST:event_generatePlotMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        hydro_threshold.setValue(10);
        sliding_window.setValue(19);
        hydro_combo.setSelectedIndex(0);
    }//GEN-LAST:event_jButton2MouseClicked

    private void getSegmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getSegmentsMouseClicked
        // TODO add your handling code here:
        System.out.println(a.disp);
        try {
            String filename = JOptionPane.showInputDialog("Save as: ");
            FileWriter f = new FileWriter(filename + ".txt");
            f.write(a.disp);
            f.close();
        } catch (IOException ex) {
            Logger.getLogger(HydrophobicityPlot.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getSegmentsMouseClicked

   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HydrophobicityPlot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HydrophobicityPlot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HydrophobicityPlot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HydrophobicityPlot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HydrophobicityPlot().setVisible(true);
        });
    }
    Map<String, Double> Kyte_Doolittle = new HashMap<>();
    Map<String, Double> Hopp_Woods = new HashMap<>();
    Map<String, Double> Cornette = new HashMap<>();
    Map<String, Double> Eisenberg = new HashMap<>();
    Map<String, Double> Rose = new HashMap<>();
    HashMap<String, Double> Janin = new HashMap<>();
    HashMap<String, Double> GES = new HashMap<>();
    
    private void buildHydrophobicityPlots() {
        Kyte_Doolittle.put("A", 1.80);
        Kyte_Doolittle.put("C", 2.50);
        Kyte_Doolittle.put("D", -3.50);
        Kyte_Doolittle.put("E", -3.50);
        Kyte_Doolittle.put("F", 2.80);
        Kyte_Doolittle.put("G", -0.40);
        Kyte_Doolittle.put("H", -3.20);
        Kyte_Doolittle.put("I", 4.50);
        Kyte_Doolittle.put("K", -3.90);
        Kyte_Doolittle.put("L", 3.80);
        Kyte_Doolittle.put("M", 1.90);
        Kyte_Doolittle.put("N", -3.50);
        Kyte_Doolittle.put("P", -1.60);
        Kyte_Doolittle.put("Q", -3.50);
        Kyte_Doolittle.put("R", -4.50);
        Kyte_Doolittle.put("S", -0.80);
        Kyte_Doolittle.put("T", -0.70);
        Kyte_Doolittle.put("V", 4.20);
        Kyte_Doolittle.put("W", -0.90);
        Kyte_Doolittle.put("Y", -1.30);
        
        Hopp_Woods.put("A", -0.50);
        Hopp_Woods.put("C", -1.00);
        Hopp_Woods.put("D", 3.00);
        Hopp_Woods.put("E", 3.00);
        Hopp_Woods.put("F", -2.50);
        Hopp_Woods.put("G", 0.00);
        Hopp_Woods.put("H", -0.50);
        Hopp_Woods.put("I", -1.80);
        Hopp_Woods.put("K", 3.00);
        Hopp_Woods.put("L", -1.80);
        Hopp_Woods.put("M", -1.30);
        Hopp_Woods.put("N", 0.20);
        Hopp_Woods.put("P", 0.00);
        Hopp_Woods.put("Q", 0.20);
        Hopp_Woods.put("R", 3.00);
        Hopp_Woods.put("S", 0.30);
        Hopp_Woods.put("T", -0.40);
        Hopp_Woods.put("V", -1.50);
        Hopp_Woods.put("W", -3.40);
        Hopp_Woods.put("Y", -2.30);
        
        Cornette.put("A", 0.20);
        Cornette.put("C", 4.10);
        Cornette.put("D", -3.10);
        Cornette.put("E", -1.80);
        Cornette.put("F", 4.40);
        Cornette.put("G", 0.00);
        Cornette.put("H", 0.50);
        Cornette.put("I", 4.80);
        Cornette.put("K", -3.10);
        Cornette.put("L", 5.70);
        Cornette.put("M", 4.20);
        Cornette.put("N", -0.50);
        Cornette.put("P", -2.20);
        Cornette.put("Q", -2.80);
        Cornette.put("R", 1.40);
        Cornette.put("S", -0.50);
        Cornette.put("T", -1.90);
        Cornette.put("V", 4.70);
        Cornette.put("W", 1.00);
        Cornette.put("Y", 3.20);
        
        Eisenberg.put("A", 0.62);
        Eisenberg.put("C", 0.29);
        Eisenberg.put("D", -0.90);
        Eisenberg.put("E", -0.74);
        Eisenberg.put("F", 1.19);
        Eisenberg.put("G", 0.48);
        Eisenberg.put("H", -0.40);
        Eisenberg.put("I", 1.38);
        Eisenberg.put("K", -1.50);
        Eisenberg.put("L", 1.06);
        Eisenberg.put("M", 0.64);
        Eisenberg.put("N", -0.78);
        Eisenberg.put("P", 0.12);
        Eisenberg.put("Q", -0.85);
        Eisenberg.put("R", -2.53);
        Eisenberg.put("S", -0.18);
        Eisenberg.put("T", -0.05);
        Eisenberg.put("V", 1.08);
        Eisenberg.put("W", 0.81);
        Eisenberg.put("Y", 0.26);
        
        Rose.put("A", 0.74);
        Rose.put("C", 0.91);
        Rose.put("D", 0.62);
        Rose.put("E", 0.62);
        Rose.put("F", 0.88);
        Rose.put("G", 0.72);
        Rose.put("H", 0.78);
        Rose.put("I", 0.88);
        Rose.put("K", 0.52);
        Rose.put("L", 0.85);
        Rose.put("M", 0.85);
        Rose.put("N", 0.63);
        Rose.put("P", 0.64);
        Rose.put("Q", 0.62);
        Rose.put("R", 0.64);
        Rose.put("S", 0.66);
        Rose.put("T", 0.70);
        Rose.put("V", 0.86);
        Rose.put("W", 0.85);
        Rose.put("Y", 0.74);
        
        Janin.put("A", 0.30);
        Janin.put("C", 0.90);
        Janin.put("D", -0.60);
        Janin.put("E", -0.70);
        Janin.put("F", 0.50);
        Janin.put("G", 0.30);
        Janin.put("H", -0.10);
        Janin.put("I", 0.70);
        Janin.put("K", -1.80);
        Janin.put("L", 0.50);
        Janin.put("M", 0.40);
        Janin.put("N", -0.50);
        Janin.put("P", -0.30);
        Janin.put("Q", -0.70);
        Janin.put("R", -1.40);
        Janin.put("S", -0.10);
        Janin.put("T", -0.20);
        Janin.put("V", 0.60);
        Janin.put("W", 0.30);
        Janin.put("Y", -0.40);
        
        GES.put("A", 1.60);
        GES.put("C", 2.00);
        GES.put("D", -9.20);
        GES.put("E", -8.20);
        GES.put("F", 3.70);
        GES.put("G", 1.00);
        GES.put("H", -3.00);
        GES.put("I", 3.10);
        GES.put("K", -8.80);
        GES.put("L", 2.80);
        GES.put("M", 3.40);
        GES.put("N", -4.80);
        GES.put("P", -0.20);
        GES.put("Q", -4.10);
        GES.put("R", -12.30);
        GES.put("S", 0.60);
        GES.put("T", 1.20);
        GES.put("V", 2.60);
        GES.put("W", 1.90);
        GES.put("Y", -0.70);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel app_name;
    private javax.swing.JButton generatePlot;
    private javax.swing.JButton getSegments;
    private javax.swing.JComboBox<String> hydro_combo;
    private javax.swing.JSlider hydro_threshold;
    private javax.swing.JButton import_button;
    private javax.swing.JTextArea input_field;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JSpinner sliding_window;
    // End of variables declaration//GEN-END:variables

    private Map<String, Double> getScale(int selectedIndex) {
        switch(selectedIndex){
            case 0: 
                return Kyte_Doolittle; 
            case 1:
                return Hopp_Woods;
            case 2:
                return Cornette;
            case 3:
                return Eisenberg;
            case 4: 
                return Rose;
            case 5:
                return Janin;
            default:
                return GES;
        }
    }
    ArrayList<String> protein_names = new ArrayList();
    private ArrayList<String> getInputs() {
        boolean hasError = false;
        protein_names = new ArrayList();
        ArrayList<String> inputs = new ArrayList();
        String tmp = "";
        String wrongSeq = "";
        for (String seq: input_field.getText().split("\r\n")) {
            if(seq.contains(">")){
                
                    hasError=false;
                
                protein_names.add((seq.split(" ")[0]));
                if(!tmp.isEmpty()){
                    inputs.add(tmp);
                    tmp = "";
                }
            }
            else if(seq.matches(".*[a-zA-Z]+.*")) {
                System.out.println("seq" + seq);
                if(!hasError)
                    tmp+=seq;
            }
            else {
                hasError = true;
                wrongSeq += seq;
                continue;
            }
           
        }
        //add last input
        if(!wrongSeq.isEmpty()){
            JOptionPane.showMessageDialog(this, 
            "Check input. Invalid fasta format in: \n" + wrongSeq, "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        inputs.add(tmp);
        return inputs;
    }
}
