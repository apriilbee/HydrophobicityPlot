/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hydrophobicityplots;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.knowm.xchart.BitmapEncoder;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.Styler.LegendPosition;
/**
 *
 * @author testuser
 */
public class PlotGraph extends javax.swing.JFrame {
     int window;
     double[] threshold;
     XYChart chart;
     ArrayList<String> protein_names;
    /**
     * Creates new form PlotGraph
     */
    public PlotGraph() {
        initComponents();
    }

    PlotGraph(ArrayList<ArrayList> plots, ArrayList<ArrayList> pos, double threshold, int window, ArrayList<String> protein_names) {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.protein_names = protein_names;
        this.window = window;
        ArrayList<Double> values = new ArrayList();
        JFrame jf = new JFrame();
        jf.setLayout(new BorderLayout());
        jf.pack();
        JPanel panel = new JPanel(new GridLayout(plots.size(),1)); 
        
       
        for(int i=0; i<plots.size(); i++){
            String name = protein_names.get(i);
            values = plots.get(i);
            XYChart chart = graph(values,pos.get(i), threshold, name);
            
             GridBagConstraints gbc = new GridBagConstraints();
            gbc.anchor = GridBagConstraints.NORTH;
            
            JPanel pp = new JPanel();
            pp.setLayout(new BoxLayout(pp,BoxLayout.PAGE_AXIS));
            JPanel tmp = new XChartPanel(chart);
            JButton b1 = new JButton("Save as JPG");
            b1.setSize(100,200);
          
            tmp.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
            b1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String filename = JOptionPane.showInputDialog("Save as: ");
                    BitmapEncoder.saveBitmap(chart, "./" + filename, BitmapEncoder.BitmapFormat.JPG);
                    JOptionPane.showMessageDialog(jf, "Saved as JPG");
                    jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                } catch (IOException ex) {
                    Logger.getLogger(PlotGraph.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            } );
            
            JPanel extra = new JPanel();
            extra.setLayout(new GridBagLayout());
            gbc.anchor = GridBagConstraints.NORTH;
            gbc.weighty = 1;
            
            JPanel butto = new JPanel();
            butto.setLayout(new BoxLayout(butto,BoxLayout.PAGE_AXIS));
            butto.add(b1);
            extra.add(butto);
            pp.add(tmp);
            pp.add(extra);
           
            panel.add(pp);
        }
        
        JScrollPane scroll = new JScrollPane(panel);
        jf.getContentPane().add(scroll);
       
        jf.setSize(850,600);
        jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jf.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlotGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlotGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlotGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlotGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
               // new PlotGraph().setVisible(true);
                
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    String disp = "";
    private XYChart graph(ArrayList<Double> values, ArrayList<Integer> pos, double threshold, String name) {
        double[] x_axis = new double[values.size()];
        double[] y_axis = new double[values.size()];
        this.threshold = new double[values.size()];
        for (int i = 0; i < x_axis.length; i++) {
            this.threshold[i] = threshold;
            x_axis[i] = pos.get(i);
            y_axis[i] = values.get(i);
        }
        //double h = getMax(y_axis);
      
        
        chart = new XYChartBuilder().title(name).xAxisTitle("Position").yAxisTitle("Average Hydrophobiciy").build();
        chart.getStyler().setLegendPosition(LegendPosition.InsideNE);
        chart.getStyler().setYAxisDecimalPattern("#.##");

        //System.out.println(chart.getStyler().getYAxisDecimalPattern());
        XYSeries gr = chart.addSeries("threshold", x_axis, this.threshold);
        chart.addSeries("Hydrophobicity Plot", x_axis, y_axis);
        
        disp += name;
      
        ArrayList<ArrayList<Point>> trends = getTrends(values, pos, threshold);
        disp += "\t" + trends.size();
        for(int i=0; i<trends.size();i++){
            double[] x = getX(trends.get(i));
            double[] y = getY(trends.get(i));
            chart.addSeries("trend"+String.valueOf(i)+ " " + (startval.get(i)+1) + "-" + (endval.get(i)+1), x , y);
            disp += "\t" + (startval.get(i)+1) + "\t" + (endval.get(i)+1);
        }
        disp += "\n";
        return chart;
    }

    private double getMax(double[] y_axis) {
        double max = y_axis[0];
        for(int i=1; i<y_axis.length; i++){
            if(max < y_axis[i])
                max = y_axis[i];
        }
        return max;
    }
    
    ArrayList<Integer> startval = new ArrayList();
    ArrayList<Integer> endval = new ArrayList();
    
    private ArrayList<ArrayList<Point>> getTrends(ArrayList<Double> values, ArrayList<Integer> pos, double threshold) {
        startval = new ArrayList();
        endval = new ArrayList();
        
        ArrayList<ArrayList<Point>> trends = new ArrayList();
        ArrayList<Point> tmp_array = new ArrayList();
        int counter = 0;
        for(int i=0; i<values.size(); i++){
            if(values.get(i) >= threshold){
                counter++;
                tmp_array.add(new Point(pos.get(i), (int) (Math.ceil(values.get(i)) + 5)));
            }
            else{
                if(counter >= window){
                    startval.add(tmp_array.get(0).x);
                    endval.add(tmp_array.get(tmp_array.size()-1).x);
                    trends.add(tmp_array);
                }
                counter = 0;
                tmp_array = new ArrayList();
            }
        }
        return trends;
    }

    private double[] getX(ArrayList<Point> get) {
        double[] x = new double[get.size()];
        for(int i=0; i<get.size();i++){
            x[i] = get.get(i).x;
        }
        return x;
        
    }
    
    private double[] getY(ArrayList<Point> get) {
        double[] y = new double[get.size()];
        double max = 0.0;
        for(int i=0; i<get.size();i++){
            y[i] = get.get(i).y;
            if(y[i] > max)
                max = y[i];
        }
        for(int i=0; i<y.length; i++){
            y[i] = max;
        }
        return y;
        
    }
}
